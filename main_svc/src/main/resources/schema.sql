CREATE TABLE IF NOT EXISTS users (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
    name VARCHAR(2000) NOT NULL,
    email VARCHAR(2000) NOT NULL UNIQUE,
    is_admin BOOLEAN NOT NULL
);
CREATE TABLE IF NOT EXISTS categories (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
    name VARCHAR(2000) NOT NULL UNIQUE
);
CREATE TABLE IF NOT EXISTS compilations (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
    title VARCHAR(2000) NOT NULL,
    pinned BOOLEAN NOT NULL
);
CREATE TABLE IF NOT EXISTS events (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
    title VARCHAR(120) NOT NULL,
    annotation VARCHAR(2000) NOT NULL,
    description VARCHAR(7000) NOT NULL,
    category_id BIGINT REFERENCES categories (id) NOT NULL,
    event_date TIMESTAMP NOT NULL,
    initiator_id BIGINT REFERENCES users (id) NOT NULL,
    created_on TIMESTAMP NOT NULL,
    published_on TIMESTAMP,
    location_lat FLOAT NOT NULL,
    location_lng FLOAT NOT NULL,
    state VARCHAR(2000) NOT NULL,
    views BIGINT NOT NULL,
    paid BOOLEAN NOT NULL,
    confirmed_requests BIGINT NOT NULL,
    participant_limit BIGINT NOT NULL,
    request_moderation BOOLEAN NOT NULL
);
CREATE TABLE IF NOT EXISTS event_compilation (
    event_id BIGINT,
    compilation_id BIGINT,
    PRIMARY KEY (event_id, compilation_id),
    FOREIGN KEY (event_id) REFERENCES events (id),
    FOREIGN KEY (compilation_id) REFERENCES compilations (id)
);
CREATE TABLE IF NOT EXISTS requests (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
    event_id BIGINT REFERENCES events (id) NOT NULL,
    requester_id BIGINT REFERENCES users (id) NOT NULL,
    created TIMESTAMP NOT NULL,
    status VARCHAR(2000) NOT NULL
);
CREATE TABLE  IF NOT EXISTS comments (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
    text VARCHAR(2000) NOT NULL,
    event_id BIGINT REFERENCES events (id) NOT NULL,
    author_id BIGINT REFERENCES users (id) NOT NULL,
    created TIMESTAMP NOT NULL,
    status VARCHAR(2000) NOT NULL,
    rating BIGINT NOT NULL
);
CREATE TABLE IF NOT EXISTS comment_rating (
    comment_id BIGINT,
    user_id BIGINT,
    state  VARCHAR(2000) NOT NULL,
    PRIMARY KEY (comment_id, user_id),
    FOREIGN KEY (comment_id) REFERENCES comments (id),
    FOREIGN KEY (user_id) REFERENCES users (id)
);
CREATE OR REPLACE FUNCTION update_comment_rating()
RETURNS TRIGGER AS '
BEGIN
    -- Обновляем количество лайков для комментария
    UPDATE comments
    SET rating = (
        (SELECT COUNT(*)
        FROM comment_rating
        WHERE comment_id = NEW.comment_id AND state = ''LIKE'') -
        (SELECT COUNT(*)
        FROM comment_rating
        WHERE comment_id = NEW.comment_id AND state = ''DISLIKE'')
    )
    WHERE id = NEW.comment_id;
    RETURN NEW;
END;
' LANGUAGE plpgsql;
CREATE TRIGGER comment_rating_update_trigger
AFTER INSERT OR UPDATE ON comment_rating
FOR EACH ROW
EXECUTE FUNCTION update_comment_rating();

CREATE OR REPLACE FUNCTION update_confirmed_requests()
RETURNS TRIGGER AS '
BEGIN
    -- Обновляем количество одобренных заявок для события
    UPDATE events
    SET confirmed_requests = (
        SELECT COUNT(*)
        FROM requests
        WHERE event_id = NEW.event_id AND status = ''CONFIRMED''
    )
    WHERE id = NEW.event_id;
    RETURN NEW;
END;
' LANGUAGE plpgsql;

CREATE TRIGGER requests_update_trigger
AFTER INSERT OR UPDATE ON requests
FOR EACH ROW
EXECUTE FUNCTION update_confirmed_requests();